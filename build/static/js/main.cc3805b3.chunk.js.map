{"version":3,"sources":["sections/applications/part2/services/notes.js","sections/applications/part2/components/Note.js","sections/applications/part2/components/Notification.js","sections/applications/part2/components/Footer.js","sections/applications/part2/App.js","index.js"],"names":["services_notes","Axios","get","then","response","data","newObject","post","id","put","concat","Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","value","onChange","target","type","components_Footer","ReactDOM","render","part2_App","document","getElementById"],"mappings":"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","file":"static/js/main.cc3805b3.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\n// const baseURL = 'http://localhost:3001/notes'\r\n// heroku sample app routing\r\n// const baseURL = \"https://ancient-inlet-21582.herokuapp.com/notes\";\r\n// relative baseURL (works when the front and backend are on the same adress)\r\nconst baseURL = '/api/notes';\r\n\r\nconst getAll = () => {\r\n  const request = Axios.get(baseURL);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst getOne = id => {\r\n  const request = Axios.get(`${baseURL}/${id}`);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = Axios.post(baseURL, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = Axios.put(`${baseURL}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getOne,\r\n  create,\r\n  update\r\n};\r\n","import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance}) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  \r\n  return (\r\n    <li className='note' >\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null){\r\n        return null\r\n    }\r\n    return(\r\n        <div className='error'>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    //The inline style object for the footer (just a plain JS object)\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2019\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport noteService from \"./services/notes\"; // Ajax services for the restful API\r\nimport Note from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\nimport Footer from \"./components/Footer\";\r\n\r\n// TODO: I must have lost the delete function from one of the commits\r\nconst App = props => {\r\n  // Setting the app's initial state\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  // The data fetching function\r\n  const getAPINotes = () =>\r\n    noteService.getAll().then(initialNotes => setNotes(initialNotes));\r\n\r\n  // By default, effects run when the component first renders and will trigger a rerender on state change.\r\n  // This behavior can be customized by passing any state variables inside the second arg array.\r\n  // Any and all variables required for the effect should be passed inside the array\r\n  useEffect(getAPINotes, []);\r\n\r\n  // Save either all the notes or only the important ones in notesToShow\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n\r\n  // The handler to change note importance\r\n  const toggleImportanceOf = id => () => {\r\n    const note = notes.find(n => n.id === id); // find the note stored in state by the id\r\n    // Shallow copy: all refs stay the same\r\n    const changedNote = { ...note, important: !note.important }; // leave all attribs the same, except reverse note.important\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(n => setNotes(notes.map(note => (note.id !== id ? note : n))))\r\n      .catch(error => {\r\n        setErrorMessage(`Note ${note.content} already deleted from server`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000); // After five seconds, the error message should go away\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      });\r\n  };\r\n\r\n  // How we render each note\r\n  const rows = () =>\r\n    notesToShow.map(note => (\r\n      <Note\r\n        key={note.id}\r\n        note={note}\r\n        toggleImportance={toggleImportanceOf(note.id)}\r\n      />\r\n    ));\r\n\r\n  // The event handler for when a note gets submitted\r\n  const addNote = event => {\r\n    event.preventDefault(); // We don't want the form to submit in the default way (I.E. triggering a re-render of the page)\r\n    // make a new note\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random() > 0.5\r\n    };\r\n\r\n    // Post the note to the API server\r\n    noteService.create(noteObject).then(n => {\r\n      setNotes(notes.concat(n));\r\n      setNewNote(\"\");\r\n    });\r\n  };\r\n\r\n  const handleNoteChange = event => setNewNote(event.target.value);\r\n\r\n  // Now there's a form that allows the adding of notes.\r\n  // Note that the form's observer is a javascript function and it goes into the form, not the button.\r\n  // Also note that setting an input value without an onChange handler function will render a read-only field.\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>{rows()}</ul>\r\n\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./sections/applications/part2/App\";\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}